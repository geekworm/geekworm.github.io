{"title":"如何写出优雅的组件","slug":"react-coding-standards","date":"2017-05-20T10:54:10.000Z","updated":"2018-05-08T03:49:28.220Z","comments":true,"excerpt":"<p>个人的 <code>react</code> 编码规范。不仅仅适用于 <code>react</code> 适用所有需要组件化的地方，比如 <code>ejs</code>。</p>","content":"<p>个人的 <code>react</code> 编码规范。不仅仅适用于 <code>react</code> 适用所有需要组件化的地方，比如 <code>ejs</code>。</p>\n<a id=\"more\"></a>\n<p>这篇文章同时还发在了 <a href=\"https://zhuanlan.zhihu.com/p/27022251\" target=\"_blank\" rel=\"noopener\">知乎专栏</a> ，喜欢的帮忙顶一下。</p>\n<blockquote>\n<p>最近在做 mad 。github 十多天没绿了。</p>\n</blockquote>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p>我当前的使用的技术栈：</p>\n<ul>\n<li>react 15.4</li>\n<li>webpack 2.4</li>\n<li>typescript 2.1</li>\n<li>tslint + tslint-react</li>\n<li>styled-jsx 0.5</li>\n<li>babel + babel-preset-env + babel-preset-react</li>\n<li>可选： redux react-router4</li>\n</ul>\n<p>详情可以看我的 <a href=\"https://github.com/EYHN/react-kits\" target=\"_blank\" rel=\"noopener\"><code>react-kit</code></a></p>\n<p>最近在学习使用 <a href=\"https://github.com/acdlite/recompose\" target=\"_blank\" rel=\"noopener\"><code>recompose</code></a>有很多高效的高阶组件, 等我用上了再来更新(有生之年)。</p>\n<h2 id=\"组件类型\"><a href=\"#组件类型\" class=\"headerlink\" title=\"组件类型\"></a>组件类型</h2><p>我把组件分为3种类型</p>\n<ul>\n<li><p>业务组件<br>处理业务逻辑，无样式，组件本身没有内容。</p>\n</li>\n<li><p>布局组件<br>处理布局，有布局，组件本身没有内容，没有业务逻辑，但可以有动画逻辑。</p>\n</li>\n<li><p>样式组件<br>负责显示内容，高复用性，使用事件和 <code>props</code> 与业务组件通讯，没有业务逻辑，但可以有动画逻辑。</p>\n</li>\n</ul>\n<h2 id=\"编写纯组件\"><a href=\"#编写纯组件\" class=\"headerlink\" title=\"编写纯组件\"></a>编写纯组件</h2><p>在 <code>react</code> 中继承自 <code>PureComponent</code> 类的为纯组件(pure component)。当组件更新时，如果组件的 <code>props</code> 和 <code>state</code> 都没发生改变，<code>render</code> 方法就不会触发，省去 <code>Virtual DOM</code> 的生成和比对过程，达到提升性能的目的。</p>\n<p>编写纯组件也可以避免大量玄学问题，大幅度提升性能。</p>\n<h2 id=\"尽可能编写无状态组件\"><a href=\"#尽可能编写无状态组件\" class=\"headerlink\" title=\"尽可能编写无状态组件\"></a>尽可能编写无状态组件</h2><p><a href=\"https://github.com/vasanthk/react-bits/blob/master/patterns/01.stateless-functions.md\" target=\"_blank\" rel=\"noopener\">无状态组件(stateless component)</a></p>\n<p>无状态函数是定义高可重用性组件的好方法。他们不没有 <code>state</code>, 它们只是 <code>functions</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Greeting = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &lt;div&gt;Hi there!&lt;/div&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// They get passed props and context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Greeting = <span class=\"function\">(<span class=\"params\">props, context</span>) =&gt;</span></span><br><span class=\"line\">  &lt;div style=&#123;&#123;<span class=\"attr\">color</span>: context.color&#125;&#125;&gt;Hi &#123;props.name&#125;&lt;<span class=\"regexp\">/div&gt;;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>typescript</code> 中无状态组件接口为 <code>React.SFC&lt;P&gt;</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Greeting:React.SFC&lt;&#123;&#125;&gt; = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &lt;div&gt;Hi there!&lt;<span class=\"regexp\">/div&gt;;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写代理组件\"><a href=\"#编写代理组件\" class=\"headerlink\" title=\"编写代理组件\"></a>编写代理组件</h2><p>样式组件 和 布局组件 尽量编写成代理组件(proxy component)。</p>\n<p>代理组件指高级组件代理低级组件的全部 <code>props</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &lt;button type=<span class=\"string\">\"button\"</span> &#123;...props&#125;&gt;</span><br></pre></td></tr></table></figure>\n<p>在 <code>typescript</code> 中则要复杂一些:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button:React.SFC&lt;React.HTMLProps&lt;HTMLButtonElement&gt;&gt; = </span><br><span class=\"line\">    (&#123;...other&#125;) =&gt; &lt;button <span class=\"keyword\">type</span>=<span class=\"string\">\"button\"</span> &#123;...other&#125;/&gt;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"状态管理\"><a href=\"#状态管理\" class=\"headerlink\" title=\"状态管理\"></a>状态管理</h2><p>业务相关的所有状态应当位于业务组件中。</p>\n<p><code>state</code> 应该放在尽可能高级的组件中。理想情况是所有状态均由最顶层的一个组件管理。</p>\n<p>如果应用需要管理多个业务组件，应该考虑使用 <code>redux</code>。</p>\n<h2 id=\"高阶组件处理副作用\"><a href=\"#高阶组件处理副作用\" class=\"headerlink\" title=\"高阶组件处理副作用\"></a>高阶组件处理副作用</h2><p><a href=\"https://github.com/vasanthk/react-bits/blob/master/patterns/15.higher-order-component.md\" target=\"_blank\" rel=\"noopener\">Higher Order Component</a></p>\n<p>在编写业务组件是应当尽量保证业务逻辑是纯的，便于测试，可以使用高阶组件将异步操作隔离。</p>\n<blockquote>\n<p>我很少用到高阶组件，应用复杂了直接上 <code>redux</code> ,可能还是我太菜了。</p>\n</blockquote>\n<p>如果使用了 <code>redux</code> 就不再需要高阶组件了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我前端是不写测试的。。。</p>\n<h2 id=\"拒绝-jQuery\"><a href=\"#拒绝-jQuery\" class=\"headerlink\" title=\"拒绝 jQuery\"></a>拒绝 jQuery</h2><p>在 react 应用中，需要操作 dom 的场景已经很少了，我们不在需要 jQuery 这么庞大的库，浏览器 API 已经足够好用。</p>\n<p>这里推荐一个教程 <a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery\" target=\"_blank\" rel=\"noopener\">You Don’t Need jQuery</a>。教程有很多语言翻译包括简体中文。</p>\n","thumbnail":"/img/react-coding-standards.png","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"技术","path":"api/tags/技术.json"},{"name":"js","path":"api/tags/js.json"},{"name":"react","path":"api/tags/react.json"}]}