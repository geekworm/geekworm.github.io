{"title":"js异步和网络Api发展史","slug":"js异步和网络api发展史","date":"2017-03-27T11:06:50.000Z","updated":"2018-05-08T03:49:28.219Z","comments":true,"excerpt":"<blockquote>\n<p>从ajax到fetch，从回调到async，滑稽带你领略js异步和网络Api发展史。<br>仅仅是速览不会深入</p>\n</blockquote>","content":"<blockquote>\n<p>从ajax到fetch，从回调到async，滑稽带你领略js异步和网络Api发展史。<br>仅仅是速览不会深入</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>js是事件驱动的语言，单进程单线程。js主线程中有一个<code>Event Loop</code>（事件循环）。</p>\n<h2 id=\"js运行顺序\"><a href=\"#js运行顺序\" class=\"headerlink\" title=\"js运行顺序\"></a>js运行顺序</h2><p>js先执行一遍所有js文件，然后进入<code>Event Loop</code>，等到有事件进入，就执行事件处理程序，执行完后再次回到<code>Event Loop</code>。</p>\n<p>举个例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//死循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你在浏览器中运行，页面会卡死（在一些浏览器中仍可以滚动），因为js不执行完，浏览器不会做任何响应。</p>\n</blockquote>\n<p>上面的代码永远不会输出hello，因为<code>setTimeout(...,0)</code>，虽然是延时0ms，但还是会在下一个事件循环中被调用。</p>\n<p>而后面的<code>while</code>循环是死循环，js引擎永远执行不完，所以不会进入事件循环的，也就永远执行不到<code>timeout</code>里的代码</p>\n<p>更详细的介绍可在<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener\">阮老师的博客</a>中看见。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>所以啥是异步呢？</p>\n<p>我们先讲异步的反义词同步。</p>\n<blockquote>\n<p>同步就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</p>\n</blockquote>\n<p>比如你发出一个网络请求请求一个数据，程序一直等待数据返回，不返回就不继续执行，这就是同步。</p>\n<p>异步要智能得多。在网络请求没有返回之前程序还会继续执行。</p>\n<p>延迟一秒在不同语言中同步、异步的不同写法:</p>\n<p>JS 异步<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出 1 3 2</span></span><br></pre></td></tr></table></figure></p>\n<p>Java 同步<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//延迟1000ms</span></span><br><span class=\"line\">Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">System.out.print(<span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.print(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出 1 2 3</span></span><br></pre></td></tr></table></figure></p>\n<p>显然<code>Java</code>的同步跟符合人类的思想，顺序执行非常简单。</p>\n<p>但<code>JS</code>的优势也特别明显，在延迟时程序不会卡死，而是继续执行下去。</p>\n<h2 id=\"回调（callback）\"><a href=\"#回调（callback）\" class=\"headerlink\" title=\"回调（callback）\"></a>回调（callback）</h2><p>回调是JS异步编程最常见的方式。</p>\n<p><a href=\"https://www.zhihu.com/question/19801131\" target=\"_blank\" rel=\"noopener\">回调函数（callback）是什么？(逼乎)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(callback,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的<code>callback()</code>就作为回调函数，在1000ms后会被调用。</p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>回到我们的主题，运用最广泛的网络api <code>ajax</code>就是以回调方式使用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\">xmlhttp=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">//定义回调函数</span></span><br><span class=\"line\">xmlhttp.onreadystatechange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果请求完成 且 返回状态码为200</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xmlhttp.readyState==<span class=\"number\">4</span> &amp;&amp; xmlhttp.status==<span class=\"number\">200</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出内容</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(xmlhttp.responseText);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xmlhttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"https://about.huaji8.top/links.json\"</span>,<span class=\"literal\">true</span><span class=\"comment\">/*异步运行*/</span>);</span><br><span class=\"line\"><span class=\"comment\">//发送</span></span><br><span class=\"line\">xmlhttp.send();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>复制到浏览器<code>console</code>可以运行。</p>\n</blockquote>\n<blockquote>\n<p><code>jquery</code>封装的ajax写法要比原版简单的多，对这是原版。</p>\n</blockquote>\n<blockquote>\n<p>ajax也可以同步运行，只要将<code>XMLHttpRequest.open()</code>最后一个参数改成<code>false</code>，就是同步运行，执行<code>send()</code>后浏览器会卡住，直到请求返回。</p>\n</blockquote>\n<h2 id=\"Promise-（承诺）\"><a href=\"#Promise-（承诺）\" class=\"headerlink\" title=\"Promise （承诺）\"></a>Promise （承诺）</h2><p>Promise是一种更高级的回调接口。</p>\n<blockquote>\n<p>详细的介绍在这<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a>，<code>Promise</code>的好处千千万，建议大家全部使用<code>Promise</code>，<code>jquery</code>的所有异步api也全部支持<code>Promise</code></p>\n</blockquote>\n<blockquote>\n<p>ES6 原生支持 Promise ， 在不支持的浏览器上可以使用垫片库 <a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"noopener\">es6-promise</a></p>\n</blockquote>\n<p>下面是一个将<code>setTimeout()</code>改造成<code>Promise</code>的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回一个Promise 就可以无限then()啦 还可以用catch()捕获异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTimeoutP</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建Promise 如果成功就调用resolve，失败就调用reject</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(resolve,ms);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeoutP(<span class=\"number\">1000</span>).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 返回Promise 可以在then()中继续执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> setTimeoutP(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 返回数据 可以在then()中获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">r</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(r);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//一秒后输出Hello</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><p>fetch 是新的网络api 基于 Promise 设计。在旧的浏览器上可以使用 <a href=\"https://github.com/matthew-andrews/isomorphic-fetch\" target=\"_blank\" rel=\"noopener\">isomorphic-fetch</a>，这个api是 node 和 浏览器环境通用的，实现同构应用必备的库。</p>\n<blockquote>\n<p>注：同构(isomorphic/universal)就是使前后端运行同一套代码的意思，后端一般是指 NodeJS 环境。</p>\n</blockquote>\n<p>范例<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://about.huaji8.top/links.json\"</span>)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;<span class=\"keyword\">return</span> e.json()&#125;)</span><br><span class=\"line\">\t.then(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(e)&#125;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>尝试在浏览器<code>console</code>中运行</p>\n</blockquote>\n<h2 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h2><p><code>Generator 函数</code> 是 <code>ES6</code> 提供的语法，不过很快就被 <code>ES2017</code> 的 <code>async 函数</code> 代替，所以不多说了，感兴趣的可以看<a href=\"http://es6.ruanyifeng.com/?search=fetch&amp;x=0&amp;y=0#docs/generator\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a></p>\n<blockquote>\n<p>第一次看到 <code>Generator 函数</code> 是在 <code>unity</code> 中的协程，现在js也有这个语法了。</p>\n</blockquote>\n<h2 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h2><p>重头来了，这是目前最屌的写法，真正用同步的写法写异步程序。</p>\n<blockquote>\n<p>async 实际是 <code>Generator 函数</code> 的语法糖， <code>Generator</code> 才是技术</p>\n</blockquote>\n<p>我们继续拿上面建的 <code>setTimeoutP()</code> 举例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回一个Promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setTimeoutP</span>(<span class=\"params\">ms</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建Promise 如果成功就调用resolve，失败就调用reject</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\tsetTimeout(resolve,ms);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncDelay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// await可以拿到Promise的返回值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> O = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://about.huaji8.top/links.json\"</span>)</span><br><span class=\"line\">\t\t.then(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;<span class=\"keyword\">return</span> e.json()&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> setTimeoutP(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(O);</span><br><span class=\"line\">\t<span class=\"comment\">//一秒后输出 https://about.huaji8.top/links.json 内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">asyncDelay();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>尝试在浏览器<code>console</code>中运行</p>\n</blockquote>\n<h2 id=\"async-异常处理\"><a href=\"#async-异常处理\" class=\"headerlink\" title=\"async 异常处理\"></a>async 异常处理</h2><p><code>async</code> 可以以同步的方式编写异常处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncDelay</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> O = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://about.huaji8.top/links.json\"</span>)</span><br><span class=\"line\">\t\t\t.then(<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;<span class=\"keyword\">return</span> e.json()&#125;)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出异常</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> setTimeoutP(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(O);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是超级方便呢。</p>\n<p>关于<code>async</code>的更多信息，可以查看<a href=\"http://es6.ruanyifeng.com/#docs/async\" target=\"_blank\" rel=\"noopener\">ECMAScript 6 入门</a>或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n","thumbnail":"/img/js异步和网络api发展史/cover.jpg","primarycolor":"white","accentcolor":"grey","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"web","path":"api/tags/web.json"},{"name":"技术","path":"api/tags/技术.json"},{"name":"js","path":"api/tags/js.json"}]}